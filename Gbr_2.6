import numpy as np
import matplotlib.pyplot as plt

def plot_phasor_sum(ax, magnitudes, angles, title_text):
    """
    Fungsi untuk memplot penjumlahan fasor secara sekuensial pada sumbu yang diberikan.
    
    Args:
        ax (matplotlib.axes.Axes): Sumbu untuk plot.
        magnitudes (list): Daftar magnitudo (panjang) dari setiap fasor.
        angles (list): Daftar sudut (fasa dalam radian) dari setiap fasor.
        title_text (str): Judul untuk subplot.
    """
    start_x, start_y = 0, 0
    colors = plt.cm.viridis(np.linspace(0, 1, len(magnitudes)))

    # Gambar setiap fasor mode secara berurutan
    for i, (mag, ang) in enumerate(zip(magnitudes, angles)):
        end_x = start_x + mag * np.cos(ang)
        end_y = start_y + mag * np.sin(ang)
        
        # Gambar panah untuk fasor mode
        ax.arrow(start_x, start_y, end_x - start_x, end_y - start_y,
                 head_width=0.08, head_length=0.12, fc=colors[i], ec=colors[i], 
                 length_includes_head=True, zorder=5, label=f'Mode {i}')
        
        start_x, start_y = end_x, end_y

    # Koordinat akhir adalah ujung dari vektor resultan
    resultant_x, resultant_y = start_x, start_y

    # Gambar vektor resultan (dari titik awal ke titik akhir)
    ax.arrow(0, 0, resultant_x, resultant_y,
             head_width=0.1, head_length=0.15, fc='black', ec='black',
             length_includes_head=True, lw=2, zorder=10, label='Resultan')

    # Hitung daya (kuadrat dari magnitudo resultan)
    power = resultant_x**2 + resultant_y**2

    # Pengaturan plot
    ax.set_title(title_text, fontsize=12)
    ax.grid(True, linestyle='--', alpha=0.6)
    ax.set_aspect('equal', adjustable='box')
    ax.spines['left'].set_position('center')
    ax.spines['bottom'].set_position('center')
    ax.spines['right'].set_color('none')
    ax.spines['top'].set_color('none')
    ax.set_xlabel('Komponen Real', loc='right')
    ax.set_ylabel('Komponen Imajiner', loc='bottom', rotation=0)
    
    # Tambahkan teks informasi daya
    ax.text(0.95, 0.05, f'Daya Relatif = {power:.2f}',
            transform=ax.transAxes, ha='right', va='bottom',
            bbox=dict(boxstyle='round,pad=0.3', fc='wheat', alpha=0.8))
            
    return power

# --- Parameter Utama ---

# Magnitudo (daya) dari mode-mode yang dominan
# Misal: Mode 0 paling kuat, lalu menurun
magnitudes = [1.0, 0.6, 0.4, 0.2]

# Sudut (fasa) untuk kasus interferensi konstruktif
# Semua fasa relatif berdekatan, menunjuk ke arah yang sama
angles_constructive = np.deg2rad([10, -5, 20, 5])

# Sudut (fasa) untuk kasus interferensi destruktif
# Fasa tersebar, menyebabkan pembatalan
angles_destructive = np.deg2rad([10, 120, 200, 310])

# --- Buat Visualisasi Plot ---
plt.style.use('seaborn-v0_8-paper')
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))
fig.suptitle('Analogi Penjumlahan Fasor untuk MMI', fontsize=16, y=0.98)

# Panel (a): Interferensi Konstruktif
plot_phasor_sum(ax1, magnitudes, angles_constructive, '(a) Interferensi Konstruktif (Daya Tinggi)')
ax1.legend(loc='upper left', fontsize='small')

# Panel (b): Interferensi Destruktif
plot_phasor_sum(ax2, magnitudes, angles_destructive, '(b) Interferensi Destruktif (Daya Rendah)')

# Atur batas sumbu agar konsisten dan semua terlihat
max_len = sum(magnitudes) * 1.1
ax1.set_xlim(-max_len, max_len)
ax1.set_ylim(-max_len, max_len)
ax2.set_xlim(-max_len, max_len)
ax2.set_ylim(-max_len, max_len)

plt.tight_layout(rect=[0, 0, 1, 0.92])
plt.show()
